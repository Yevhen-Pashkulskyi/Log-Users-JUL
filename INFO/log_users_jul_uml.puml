@startuml
class org.example.app.entity.User {
~ Long id
~ String name
~ String email
+ String toString()
}


class org.example.app.utils.Users {
+ {static} String DB_DRIVER
+ {static} String DB_BASE_URL
+ {static} String DB_NAME
+ {static} String WRONG_EMAIL_MSG
+ {static} String WRONG_ID_MSG
+ {static} String DB_ABSENT_MSG
+ {static} String DATA_ABSENT_MSG
+ {static} String DATA_INSERT_MSG
+ {static} String DATA_UPDATE_MSG
+ {static} String DATA_DELETE_MSG
+ {static} String APP_CLOSE_MSG
+ {static} String INPUT_REQ_MSG
+ {static} String INCORRECT_VALUE_MSG
+ {static} String INCORRECT_OPTION_MSG
+ {static} String LOG_DB_ABSENT_MSG
+ {static} String LOG_DATA_INPUTS_WRONG_MSG
+ {static} String LOG_DATA_ABSENT_MSG
+ {static} String LOG_DB_ERROR_MSG
}

class org.example.app.utils.AppStarter {
+ {static} void startApp()
}

class org.example.app.view.UserView {
~ Scanner scanner
+ Map<String,String> getCreateData()
+ Map<String,String> getByIDData()
+ Map<String,String> getUpdateData()
+ Map<String,String> getDeleteData()
+ void getOutput(String)
}


class org.example.app.database.DBCheck {
+ {static} boolean isDBExists()
}

class org.example.app.exceptions.DBException {
}
class org.example.app.utils.AppValidator {
+ {static} String ID_RGX
+ {static} String EMAIL_RGX
+ {static} boolean isIdValid(String)
+ {static} boolean isEmailValid(String)
}


class org.example.app.exceptions.OptionException {
}
class org.example.app.database.DBConn {
- {static} Logger LOGGER
+ {static} Connection connect()
}


class org.example.app.repository.impl.UserRepository {
- {static} String TABLE_USERS
- {static} Logger LOGGER
+ String create(User)
+ Optional<List<User>> read()
+ Optional<User> readById(Long)
+ String update(User)
+ String delete(Long)
+ boolean isIdExists(Long)
}


class org.example.app.view.AppView {
+ int getOption()
- void getMenu()
+ void getOutput(String)
}

interface org.example.app.repository.AppRepository {
~ String create(T)
~ Optional<List<T>> read()
~ Optional<T> readById(Long)
~ String update(T)
~ String delete(Long)
}

class org.example.app.App {
+ {static} void main(String[])
}

class org.example.app.service.UserService {
~ UserRepository repository
- {static} Logger LOGGER
+ String create(Map<String,String>)
+ String read()
+ String readById(Map<String,String>)
+ String update(Map<String,String>)
+ String delete(Map<String,String>)
}


class org.example.app.controller.UserController {
~ UserView view
~ UserService service
+ void createUser()
+ void readUsers()
+ void readUserById()
+ void updateUser()
+ void deleteUser()
}


class org.example.app.entity.UserMapper {
+ User mapUserData(Map<String,String>)
}

class org.example.app.exceptions.UserException {
~ Map<String,String> errors
+ String getErrors(Map<String,String>)
}


class org.example.app.service.AppService {
~ UserRepository repository
~ UserService service
~ UserView view
~ UserController controller
+ void handleOption(int)
}


class org.example.app.utils.UserValidator {
+ Map<String,String> validateUserData(Map<String,String>)
}

class org.example.app.controller.AppController {
~ AppView view
~ AppService service
+ void runApp()
}




org.example.app.exceptions.RuntimeException <|-- org.example.app.exceptions.DBException
org.example.app.exceptions.RuntimeException <|-- org.example.app.exceptions.OptionException
org.example.app.repository.AppRepository <|.. org.example.app.repository.impl.UserRepository
org.example.app.exceptions.RuntimeException <|-- org.example.app.exceptions.UserException
@enduml